package com.example.plugins.epicquests;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.server.ServerLoadEvent;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.util.BlockIterator;
import org.bukkit.util.Vector;
import org.bukkit.Material;
import org.bukkit.event.Listener;
import java.util.HashMap;




public class EpicQuests extends JavaPlugin implements CommandExecutor, Listener {
    private boolean countdownRunning = false; // 用于标记倒计时是否正在进行
    private boolean airBlockDetected = false; // 用于标记是否检测到空气方块

    private BukkitRunnable countdownTask;

    // 定义变量以存储计算后的值
    private int[] var_a;
    private int[] var_b;
    private int[] var_c;
    private int[] var_d;
    private int[] var_a1;
    private int[] var_b1;
    private int[] var_a2;
    private int[] var_b2;
    private int[] var_ty1;
    private int[] var_ty2;
    private int[] var_jy1;
    private int[] var_jy2;
    private int[] var_zy1;
    private int[] var_zy2;
    private int zy1x;
    private int zy1y;
    private int zy1z;
    private int zy2x;
    private int zy2y;
    private int zy2z;
    private int qk1x;
    private int qk1y;
    private int qk1z;
    private int qk2x;
    private int qk2y;
    private int qk2z;
    private Material fkMaterial = Material.GLASS;

    private boolean replaceRunning = false; // 用于标记是否正在替换中



    @Override
    public void onEnable() {
        // 加载配置文件
        getConfig().options().copyDefaults(true);
        saveConfig();

        // 注册命令
        this.getCommand("dfk").setExecutor(this);

        // 注册事件监听器
        getServer().getPluginManager().registerEvents(this, this); // 注册当前类为事件监听器
    }


    @Override
    public void onDisable() {
        // 在插件禁用时执行的逻辑（如果有）
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (args.length < 1) {
            sender.sendMessage("/dfk <参数名> <数值> 或 /dfk vars 或 /dfk replace");
            return true;
        }

        FileConfiguration config = getConfig();
        String action = args[0].toLowerCase();

        if (action.equals("vars")) {
            calculateVars(config);
            sender.sendMessage("变量已计算。");
            return true;
        }

        if (action.equals("replace")) {
            if (!(sender instanceof Player)) {
                sender.sendMessage("该命令只能由玩家执行！");
                return true;
            }

            Player player = (Player) sender;
            if (replaceRunning) {
                sender.sendMessage("替换任务已经在运行中！");
                return true;
            }

            startReplaceTask(player);
            sender.sendMessage("已开始循环替换区域内的方块为玻璃块。");
            return true;
        }

        if (args.length < 2) {
            sender.sendMessage("/dfk <参数名> <数值> 或 /dfk vars 或 /dfk replace");
            return true;
        }

        String paramName = args[0].toLowerCase();
        String paramValue = args[1];

        // 检查是否为有效参数
        if (!isValidParam(paramName)) {
            sender.sendMessage("参数名必须为 x、y、z、c、g 或 k。");
            return true;
        }

        try {
            int val = Integer.parseInt(paramValue);

            // 验证特定参数的约束
            if (paramName.equals("g") && val % 3 != 0) {
                sender.sendMessage("参数 'g' 必须是能被 3 整除的整数。");
                return true;
            }

            // 更新配置文件中的参数
            String nodePath = getParamNode(paramName);
            config.set(nodePath + paramName, val);
            saveConfig();

            sender.sendMessage("设置的参数 '" + paramName + "' 为: " + val);

            // 计算变量值并存储
            calculateVars(config);

        } catch (NumberFormatException e) {
            sender.sendMessage("数值必须是整数。");
            return true;
        }

        return true;
    }

    // 检查参数名是否有效
    private boolean isValidParam(String paramName) {
        return paramName.equals("x") || paramName.equals("y") || paramName.equals("z") ||
                paramName.equals("c") || paramName.equals("g") || paramName.equals("k");
    }

    // 根据参数名获取参数保存的节点路径
    private String getParamNode(String paramName) {
        if (paramName.equals("x") || paramName.equals("y") || paramName.equals("z")) {
            return "parameters.xyz.";
        } else {
            return "parameters.cgk.";
        }
    }

    // 计算变量值并存储
    private void calculateVars(FileConfiguration config) {
        int x = config.getInt("parameters.xyz.x");
        int y = config.getInt("parameters.xyz.y");
        int z = config.getInt("parameters.xyz.z");
        int c = config.getInt("parameters.cgk.c");
        int g = config.getInt("parameters.cgk.g");
        int k = config.getInt("parameters.cgk.k");


        var_a = new int[]{x, y, z};
        var_b = new int[]{x + c + 1, y , z + k + 1};
        var_c = new int[]{x + c + 1, y + g , z };
        var_d = new int[]{x , y + g , z + k + 1};
        var_a1 = new int[]{x, y + 1, z};
        var_b1 = new int[]{x + c + 1, y + 1, z + k + 1};
        var_a2 = new int[]{x + 1, y + 1, z + 1};
        var_b2 = new int[]{x + c, y + 1, z + g};
        var_ty1 = new int[]{x + 1, y + 1, z + 1};
        var_ty2 = new int[]{x + c, y + (g / 3) * 1, z + g};
        var_jy1 = new int[]{x + 1, y + 1 + (g / 3) * 1, z + 1};
        var_jy2 = new int[]{x + c, y + (g / 3) * 2, z + g};
        zy1x = x + 1;
        zy1y = y + 1 + (g / 3) * 2;
        zy1z = z + 1;
        var_zy1 = new int[]{zy1x, zy1y, zy1z};
        zy2x = x + c;
        zy2y = y + (g / 3) * 3;
        zy2z = z + g;
        var_zy2 = new int[]{zy2x, zy2y, zy2z};
        qk1x = x + 1 ;
        qk1y = y + 1 ;
        qk1z = z + 1 ;
        qk2x = x + c ;
        qk2y = y + g ;
        qk2z = z + k ;
    }

    // 开始循环替换任务
    private void startReplaceTask(Player player) {
        replaceRunning = true;
        World world = player.getWorld();

        // 使用 Bukkit 调度器启动一个循环任务，每个游戏刻检查一次 replaceRunning 的值
        Bukkit.getScheduler().runTaskTimer(this, () -> {
            if (replaceRunning) {
                // 替换石头方块为铁方块
                replaceBlocksInRange(world, Material.STONE, Material.IRON_BLOCK, var_ty1, var_ty2);

                // 替换石头方块为金块
                replaceBlocksInRange(world, Material.STONE, Material.GOLD_BLOCK, var_jy1, var_jy2);

                // 替换石头方块为钻石方块
                replaceBlocksInRange(world, Material.STONE, Material.DIAMOND_BLOCK, var_zy1, var_zy2);

                // 替换指定区域内的方块为玻璃块
                replaceBlocks(player, var_a, var_b);
                replaceBlocks(player, var_a1, var_c);
                replaceBlocks(player, var_c, var_b1);
                replaceBlocks(player, var_b1, var_d);
                replaceBlocks(player, var_d, var_a1);
            }
        }, 0L, 3L); // 每个游戏刻（大约每秒）执行一次

        // 你也可以在这里添加停止任务的逻辑，如果你想要手动停止任务的话
        // 例如：if (!replaceRunning) {Bukkit.getScheduler().cancelTasks(this);}
    }

    // 替换指定区域内的方块为指定的方块类型
    private void replaceBlocksInRange(World world, Material from, Material to, int[] fromCoords, int[] toCoords) {
        int minX = Math.min(fromCoords[0], toCoords[0]);
        int minY = Math.min(fromCoords[1], toCoords[1]);
        int minZ = Math.min(fromCoords[2], toCoords[2]);
        int maxX = Math.max(fromCoords[0], toCoords[0]);
        int maxY = Math.max(fromCoords[1], toCoords[1]);
        int maxZ = Math.max(fromCoords[2], toCoords[2]);

        for (int x = minX; x <= maxX; x++) {
            for (int y = minY; y <= maxY; y++) {
                for (int z = minZ; z <= maxZ; z++) {
                    if (world.getBlockAt(x, y, z).getType() == from) {
                        world.getBlockAt(x, y, z).setType(to);
                    }
                }
            }
        }
    }

    // 替换指定区域内的方块为玻璃块
    private void replaceBlocks(Player player, int[] start, int[] end) {
        World world = player.getWorld();
        Vector min = new Vector(start[0], start[1], start[2]);
        Vector max = new Vector(end[0], end[1], end[2]);

        for (int x = Math.min(min.getBlockX(), max.getBlockX()); x <= Math.max(min.getBlockX(), max.getBlockX()); x++) {
            for (int y = Math.min(min.getBlockY(), max.getBlockY()); y <= Math.max(min.getBlockY(), max.getBlockY()); y++) {
                for (int z = Math.min(min.getBlockZ(), max.getBlockZ()); z <= Math.max(min.getBlockZ(), max.getBlockZ()); z++) {
                    world.getBlockAt(x, y, z).setType(Material.GLASS);
                }
            }
        }
    }

    @EventHandler
    public void onServerLoad(ServerLoadEvent event) {

        // 服务器加载事件触发时执行
        Bukkit.getScheduler().runTaskTimer(this, () -> {
            // 获取指定区域内的所有方块
            World world = Bukkit.getWorlds().get(0); // 假设您在第一个世界中检测
            int minX = zy1x;
            int minY = zy1y;
            int minZ = zy1z;
            int maxX = zy2x;
            int maxY = zy2y;
            int maxZ = zy2z;

            boolean hasAirBlock = false;
            for (int x = minX; x <= maxX; x++) {
                for (int y = minY; y <= maxY; y++) {
                    for (int z = minZ; z <= maxZ; z++) {
                        Block block = world.getBlockAt(x, y, z);
                        if (block.getType() == Material.AIR) {
                            hasAirBlock = true;
                            break;
                        }
                    }
                    if (hasAirBlock) {
                        break;
                    }
                }
                if (hasAirBlock) {
                    break;
                }
            }

            // 根据检测结果执行相应操作
            if (hasAirBlock) {
                // 如果区域内含有空气方块且之前未检测到空气方块，则向控制台输出信息并设置标志位
                if (!airBlockDetected) {
                    getLogger().info("There is an air block in the specified region!");
                    airBlockDetected = true;
                    stopCountdown(); // 停止倒计时
                    // 显示消息给所有在线玩家
                    for (Player player : Bukkit.getOnlinePlayers()) {
                        player.sendTitle("§c想完成？做梦呢？", "", 10, 70, 20);
                    }
                }
            } else {
                // 如果区域内不含有空气方块，则启动倒计时，并重置标志位
                if (!countdownRunning) {
                    startCountdown();
                    airBlockDetected = false;
                }
            }
        }, 0L, 20L); // 延迟0 tick执行，之后每20 ticks（1秒）执行一次


    }
    // 清空指定区域内的所有方块
    private void clearBlocksInRange(World world, int[] start, int[] end) {
        int minX = Math.min(start[0], end[0]);
        int minY = Math.min(start[1], end[1]);
        int minZ = Math.min(start[2], end[2]);
        int maxX = Math.max(start[0], end[0]);
        int maxY = Math.max(start[1], end[1]);
        int maxZ = Math.max(start[2], end[2]);

        for (int x = minX; x <= maxX; x++) {
            for (int y = minY; y <= maxY; y++) {
                for (int z = minZ; z <= maxZ; z++) {
                    world.getBlockAt(x, y, z).setType(Material.AIR);
                }
            }
        }
    }

    private void startCountdown() {
        // 如果倒计时已经在运行，则不再启动新的倒计时
        if (countdownRunning) {
            return;
        }

        countdownRunning = true; // 标记倒计时正在运行

        countdownTask = new BukkitRunnable() {
            int seconds = 15;

            @Override
            public void run() {
                if (seconds > 0) {
                    // 向所有在线玩家显示倒计时消息
                    for (Player player : Bukkit.getOnlinePlayers()) {
                        player.sendTitle("§c倒计时:"+ seconds, "", 0, 20, 0);
                    }
                    seconds--;
                    // 每一秒播放音效
                    Bukkit.dispatchCommand(Bukkit.getConsoleSender(), "execute as @a at @a run playsound minecraft:block.note_block.pling block @a");
                } else {
                    // 倒计时结束时取消任务
                    cancel();
                    countdownRunning = false; // 标记倒计时结束
                    World world = Bukkit.getWorlds().get(0); // 获取第一个世界
                    clearBlocksInRange(world, new int[]{qk1x, qk1y, qk1z}, new int[]{qk2x, qk2y, qk2z});
                    Bukkit.dispatchCommand(Bukkit.getConsoleSender(), "dq 1");
                }
            }
        };
        countdownTask.runTaskTimer(this, 0L, 20L);
    }

    private void stopCountdown() {
        // 停止倒计时任务
        if (countdownTask != null) {
            countdownTask.cancel();
            countdownRunning = false;
        }

    }
}
